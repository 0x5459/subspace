
//! Autogenerated weights for pallet_messenger
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-06-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `mac-mini.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/subspace-node
// domain
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_messenger
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./domains/pallets/messenger/src/weights.rs
// --template
// ./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::ParityDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_messenger.
pub trait WeightInfo {
	fn initiate_channel() -> Weight;
	fn close_channel() -> Weight;
	fn do_open_channel() -> Weight;
	fn do_close_channel() -> Weight;
	fn relay_message() -> Weight;
	fn relay_message_response() -> Weight;
}

/// Weights for pallet_messenger using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `SelfDomainId::SelfDomainId` (r:1 w:0)
	/// Proof: `SelfDomainId::SelfDomainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::ChainAllowlist` (r:1 w:0)
	/// Proof: `Messenger::ChainAllowlist` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::NextChannelId` (r:1 w:1)
	/// Proof: `Messenger::NextChannelId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(5550), added: 8025, mode: `MaxEncodedLen`)
	/// Storage: `Messenger::CounterForOutbox` (r:1 w:1)
	/// Proof: `Messenger::CounterForOutbox` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Messenger::Outbox` (r:1 w:1)
	/// Proof: `Messenger::Outbox` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::BlockMessages` (r:1 w:1)
	/// Proof: `Messenger::BlockMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::Channels` (r:0 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn initiate_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `93`
		//  Estimated: `9015`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(56_000_000, 9015)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `Messenger::Channels` (r:1 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SelfDomainId::SelfDomainId` (r:1 w:0)
	/// Proof: `SelfDomainId::SelfDomainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::CounterForOutbox` (r:1 w:1)
	/// Proof: `Messenger::CounterForOutbox` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Messenger::Outbox` (r:1 w:1)
	/// Proof: `Messenger::Outbox` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::BlockMessages` (r:1 w:1)
	/// Proof: `Messenger::BlockMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn close_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `278`
		//  Estimated: `3743`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(22_000_000, 3743)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: `Messenger::Channels` (r:1 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn do_open_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248`
		//  Estimated: `3713`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 3713)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Messenger::Channels` (r:1 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn do_close_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248`
		//  Estimated: `3713`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_000_000, 3713)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Messenger::Inbox` (r:1 w:1)
	/// Proof: `Messenger::Inbox` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::Channels` (r:1 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SelfDomainId::SelfDomainId` (r:1 w:0)
	/// Proof: `SelfDomainId::SelfDomainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::InboxResponses` (r:1 w:1)
	/// Proof: `Messenger::InboxResponses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::CounterForInboxResponses` (r:1 w:1)
	/// Proof: `Messenger::CounterForInboxResponses` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Messenger::BlockMessages` (r:1 w:1)
	/// Proof: `Messenger::BlockMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn relay_message() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `378`
		//  Estimated: `3843`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(22_000_000, 3843)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Messenger::OutboxResponses` (r:1 w:1)
	/// Proof: `Messenger::OutboxResponses` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::Channels` (r:1 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::Outbox` (r:1 w:1)
	/// Proof: `Messenger::Outbox` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::CounterForOutbox` (r:1 w:1)
	/// Proof: `Messenger::CounterForOutbox` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn relay_message_response() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `4034`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 4034)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `SelfDomainId::SelfDomainId` (r:1 w:0)
	/// Proof: `SelfDomainId::SelfDomainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::ChainAllowlist` (r:1 w:0)
	/// Proof: `Messenger::ChainAllowlist` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::NextChannelId` (r:1 w:1)
	/// Proof: `Messenger::NextChannelId` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(5550), added: 8025, mode: `MaxEncodedLen`)
	/// Storage: `Messenger::CounterForOutbox` (r:1 w:1)
	/// Proof: `Messenger::CounterForOutbox` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Messenger::Outbox` (r:1 w:1)
	/// Proof: `Messenger::Outbox` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::BlockMessages` (r:1 w:1)
	/// Proof: `Messenger::BlockMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::Channels` (r:0 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn initiate_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `93`
		//  Estimated: `9015`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(56_000_000, 9015)
			.saturating_add(ParityDbWeight::get().reads(8_u64))
			.saturating_add(ParityDbWeight::get().writes(7_u64))
	}
	/// Storage: `Messenger::Channels` (r:1 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SelfDomainId::SelfDomainId` (r:1 w:0)
	/// Proof: `SelfDomainId::SelfDomainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::CounterForOutbox` (r:1 w:1)
	/// Proof: `Messenger::CounterForOutbox` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Messenger::Outbox` (r:1 w:1)
	/// Proof: `Messenger::Outbox` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::BlockMessages` (r:1 w:1)
	/// Proof: `Messenger::BlockMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn close_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `278`
		//  Estimated: `3743`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(22_000_000, 3743)
			.saturating_add(ParityDbWeight::get().reads(5_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
	}
	/// Storage: `Messenger::Channels` (r:1 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn do_open_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248`
		//  Estimated: `3713`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 3713)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Messenger::Channels` (r:1 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn do_close_channel() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248`
		//  Estimated: `3713`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_000_000, 3713)
			.saturating_add(ParityDbWeight::get().reads(1_u64))
			.saturating_add(ParityDbWeight::get().writes(1_u64))
	}
	/// Storage: `Messenger::Inbox` (r:1 w:1)
	/// Proof: `Messenger::Inbox` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::Channels` (r:1 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SelfDomainId::SelfDomainId` (r:1 w:0)
	/// Proof: `SelfDomainId::SelfDomainId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::InboxResponses` (r:1 w:1)
	/// Proof: `Messenger::InboxResponses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::CounterForInboxResponses` (r:1 w:1)
	/// Proof: `Messenger::CounterForInboxResponses` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Messenger::BlockMessages` (r:1 w:1)
	/// Proof: `Messenger::BlockMessages` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn relay_message() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `378`
		//  Estimated: `3843`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(22_000_000, 3843)
			.saturating_add(ParityDbWeight::get().reads(6_u64))
			.saturating_add(ParityDbWeight::get().writes(5_u64))
	}
	/// Storage: `Messenger::OutboxResponses` (r:1 w:1)
	/// Proof: `Messenger::OutboxResponses` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::Channels` (r:1 w:1)
	/// Proof: `Messenger::Channels` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::Outbox` (r:1 w:1)
	/// Proof: `Messenger::Outbox` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Messenger::CounterForOutbox` (r:1 w:1)
	/// Proof: `Messenger::CounterForOutbox` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn relay_message_response() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `569`
		//  Estimated: `4034`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_000_000, 4034)
			.saturating_add(ParityDbWeight::get().reads(4_u64))
			.saturating_add(ParityDbWeight::get().writes(4_u64))
	}
}
