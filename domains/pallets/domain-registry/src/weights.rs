
//! Autogenerated weights for pallet_domain_registry
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-09, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/subspace-node
// executor
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_domain_registry
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./domains/pallets/domain-registry/src/weights.rs
// --template
// ./frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_domain_registry.
pub trait WeightInfo {
	fn create_domain() -> Weight;
	fn register_domain_operator() -> Weight;
	fn deregister_domain_operator() -> Weight;
	fn submit_core_bundle() -> Weight;
	fn submit_fraud_proof() -> Weight;
}

/// Weights for pallet_domain_registry using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: DomainRegistry NextDomainId (r:1 w:1)
	/// Proof Skipped: DomainRegistry NextDomainId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: DomainRegistry Domains (r:0 w:1)
	/// Proof Skipped: DomainRegistry Domains (max_values: None, max_size: None, mode: Measured)
	/// Storage: DomainRegistry DomainCreators (r:0 w:1)
	/// Proof Skipped: DomainRegistry DomainCreators (max_values: None, max_size: None, mode: Measured)
	/// Storage: DomainRegistry CreatedAt (r:0 w:1)
	/// Proof Skipped: DomainRegistry CreatedAt (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement HeadReceiptNumber (r:0 w:1)
	/// Proof Skipped: Settlement HeadReceiptNumber (max_values: None, max_size: None, mode: Measured)
	fn create_domain() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `14936`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(49_000_000, 14936)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: ExecutorRegistry Executors (r:1 w:0)
	/// Proof Skipped: ExecutorRegistry Executors (max_values: None, max_size: None, mode: Measured)
	/// Storage: DomainRegistry Domains (r:1 w:0)
	/// Proof Skipped: DomainRegistry Domains (max_values: None, max_size: None, mode: Measured)
	/// Storage: DomainRegistry DomainOperators (r:2 w:1)
	/// Proof Skipped: DomainRegistry DomainOperators (max_values: None, max_size: None, mode: Measured)
	fn register_domain_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `810`
		//  Estimated: `15300`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(30_000_000, 15300)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: DomainRegistry Domains (r:1 w:0)
	/// Proof Skipped: DomainRegistry Domains (max_values: None, max_size: None, mode: Measured)
	/// Storage: DomainRegistry DomainOperators (r:1 w:1)
	/// Proof Skipped: DomainRegistry DomainOperators (max_values: None, max_size: None, mode: Measured)
	fn deregister_domain_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369`
		//  Estimated: `7668`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 7668)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Settlement OldestReceiptNumber (r:1 w:1)
	/// Proof Skipped: Settlement OldestReceiptNumber (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement HeadReceiptNumber (r:1 w:1)
	/// Proof Skipped: Settlement HeadReceiptNumber (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement Receipts (r:1 w:2)
	/// Proof Skipped: Settlement Receipts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement ReceiptVotes (r:3 w:2)
	/// Proof Skipped: Settlement ReceiptVotes (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement PrimaryBlockHash (r:1 w:1)
	/// Proof Skipped: Settlement PrimaryBlockHash (max_values: None, max_size: None, mode: Measured)
	/// Storage: DomainRegistry SuccessfulBundles (r:1 w:1)
	/// Proof Skipped: DomainRegistry SuccessfulBundles (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Settlement StateRoots (r:0 w:1)
	/// Proof Skipped: Settlement StateRoots (max_values: None, max_size: None, mode: Measured)
	fn submit_core_bundle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4145`
		//  Estimated: `52775`
		// Minimum execution time: 100_000_000 picoseconds.
		Weight::from_parts(118_000_000, 52775)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: Settlement HeadReceiptNumber (r:1 w:1)
	/// Proof Skipped: Settlement HeadReceiptNumber (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement PrimaryBlockHash (r:256 w:0)
	/// Proof Skipped: Settlement PrimaryBlockHash (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement ReceiptVotes (r:510 w:255)
	/// Proof Skipped: Settlement ReceiptVotes (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement Receipts (r:255 w:255)
	/// Proof Skipped: Settlement Receipts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement StateRoots (r:255 w:255)
	/// Proof Skipped: Settlement StateRoots (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement SuccessfulFraudProofs (r:1 w:1)
	/// Proof Skipped: Settlement SuccessfulFraudProofs (max_values: Some(1), max_size: None, mode: Measured)
	fn submit_fraud_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `113582`
		//  Estimated: `3848502`
		// Minimum execution time: 7_131_000_000 picoseconds.
		Weight::from_parts(7_645_000_000, 3848502)
			.saturating_add(T::DbWeight::get().reads(1278_u64))
			.saturating_add(T::DbWeight::get().writes(767_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: DomainRegistry NextDomainId (r:1 w:1)
	/// Proof Skipped: DomainRegistry NextDomainId (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: DomainRegistry Domains (r:0 w:1)
	/// Proof Skipped: DomainRegistry Domains (max_values: None, max_size: None, mode: Measured)
	/// Storage: DomainRegistry DomainCreators (r:0 w:1)
	/// Proof Skipped: DomainRegistry DomainCreators (max_values: None, max_size: None, mode: Measured)
	/// Storage: DomainRegistry CreatedAt (r:0 w:1)
	/// Proof Skipped: DomainRegistry CreatedAt (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement HeadReceiptNumber (r:0 w:1)
	/// Proof Skipped: Settlement HeadReceiptNumber (max_values: None, max_size: None, mode: Measured)
	fn create_domain() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `316`
		//  Estimated: `14936`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(49_000_000, 14936)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: ExecutorRegistry Executors (r:1 w:0)
	/// Proof Skipped: ExecutorRegistry Executors (max_values: None, max_size: None, mode: Measured)
	/// Storage: DomainRegistry Domains (r:1 w:0)
	/// Proof Skipped: DomainRegistry Domains (max_values: None, max_size: None, mode: Measured)
	/// Storage: DomainRegistry DomainOperators (r:2 w:1)
	/// Proof Skipped: DomainRegistry DomainOperators (max_values: None, max_size: None, mode: Measured)
	fn register_domain_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `810`
		//  Estimated: `15300`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(30_000_000, 15300)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: DomainRegistry Domains (r:1 w:0)
	/// Proof Skipped: DomainRegistry Domains (max_values: None, max_size: None, mode: Measured)
	/// Storage: DomainRegistry DomainOperators (r:1 w:1)
	/// Proof Skipped: DomainRegistry DomainOperators (max_values: None, max_size: None, mode: Measured)
	fn deregister_domain_operator() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369`
		//  Estimated: `7668`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(17_000_000, 7668)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Settlement OldestReceiptNumber (r:1 w:1)
	/// Proof Skipped: Settlement OldestReceiptNumber (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement HeadReceiptNumber (r:1 w:1)
	/// Proof Skipped: Settlement HeadReceiptNumber (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement Receipts (r:1 w:2)
	/// Proof Skipped: Settlement Receipts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement ReceiptVotes (r:3 w:2)
	/// Proof Skipped: Settlement ReceiptVotes (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement PrimaryBlockHash (r:1 w:1)
	/// Proof Skipped: Settlement PrimaryBlockHash (max_values: None, max_size: None, mode: Measured)
	/// Storage: DomainRegistry SuccessfulBundles (r:1 w:1)
	/// Proof Skipped: DomainRegistry SuccessfulBundles (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Settlement StateRoots (r:0 w:1)
	/// Proof Skipped: Settlement StateRoots (max_values: None, max_size: None, mode: Measured)
	fn submit_core_bundle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4145`
		//  Estimated: `52775`
		// Minimum execution time: 100_000_000 picoseconds.
		Weight::from_parts(118_000_000, 52775)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: Settlement HeadReceiptNumber (r:1 w:1)
	/// Proof Skipped: Settlement HeadReceiptNumber (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement PrimaryBlockHash (r:256 w:0)
	/// Proof Skipped: Settlement PrimaryBlockHash (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement ReceiptVotes (r:510 w:255)
	/// Proof Skipped: Settlement ReceiptVotes (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement Receipts (r:255 w:255)
	/// Proof Skipped: Settlement Receipts (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement StateRoots (r:255 w:255)
	/// Proof Skipped: Settlement StateRoots (max_values: None, max_size: None, mode: Measured)
	/// Storage: Settlement SuccessfulFraudProofs (r:1 w:1)
	/// Proof Skipped: Settlement SuccessfulFraudProofs (max_values: Some(1), max_size: None, mode: Measured)
	fn submit_fraud_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `113582`
		//  Estimated: `3848502`
		// Minimum execution time: 7_131_000_000 picoseconds.
		Weight::from_parts(7_645_000_000, 3848502)
			.saturating_add(RocksDbWeight::get().reads(1278_u64))
			.saturating_add(RocksDbWeight::get().writes(767_u64))
	}
}
